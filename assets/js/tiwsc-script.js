jQuery(document).ready(function ($) {
  // DEBUG MODE - Remove this block when issue is fixed
  window.TIWSC_DEBUG = true;

  // Override console.log for TIWSC to add timestamps
  const originalLog = console.log;
  window.tiwscLog = function(...args) {
    if (window.TIWSC_DEBUG) {
      originalLog('[TIWSC ' + new Date().toISOString().substr(11, 12) + ']', ...args);
    }
  };
  console.log('TIWSC Script loaded - Version 2.0 with Variation Fix')
  console.log(
    'tiwsc_ajax:',
    typeof tiwsc_ajax !== 'undefined' ? tiwsc_ajax : 'undefined'
  )

  // Track which variations were added
  const ADDED_LABEL = 'Toegevoegd' // change if your site uses a different text
  window.addedMap = new Map(); // Make it global
  const addedMap = window.addedMap; // Keep local reference

  // Support both native WooCommerce variation forms and those generated by the
  // CartFlows Variation Swatches plugin (cfvsw)
  const FORM_SELECTOR = 'form.variations_form, form.cfvsw_variations_form'

  // Initialize addedMap with session data from server
  if (typeof tiwsc_ajax !== 'undefined' && tiwsc_ajax.initial_samples) {
    console.log(
      '[TIWSC] Initializing with samples from session:',
      tiwsc_ajax.initial_samples
    )
    tiwsc_ajax.initial_samples.forEach(function (sampleKey) {
      if (sampleKey.indexOf('|') !== -1) {
        // Variable product: product_id|attribute|value
        const parts = sampleKey.split('|')
        if (parts.length === 3) {
          const productId = parts[0]
          const attrName = parts[1]
          const attrValue = parts[2]
          // Convert to the format used in JavaScript
          const key = 'attribute_' + attrName + '=' + attrValue

          if (!addedMap.has(productId)) {
            addedMap.set(productId, new Set())
          }
          addedMap.get(productId).add(key)
        }
      }
    })
    console.log('[TIWSC] Initialized addedMap:', addedMap)
  }

  function getFormPid ($form) {
    return (
      $form.find('input[name="product_id"]').val() ||
      $form.find('input[name="add-to-cart"]').val() ||
      $form.data('product_id') ||
      null
    )
  }

  // Enhanced function to get the current attribute key
  function getAttrKey ($form) {
    const parts = []
    $form.find('select[name^="attribute_"]').each(function () {
      const $select = $(this)
      const name = $select.attr('name')
      let value = $select.val()

      // If empty or placeholder value, try to get from swatches
      if (!value || value === '') {
        const attrName = name.replace('attribute_', '')

        // Check for cfvsw selected swatch
        const swatchSelectors = [
          `[swatches-attr="${name}"] .cfvsw-selected-swatch`,
          `[swatches-attr="${attrName}"] .cfvsw-selected-swatch`,
          `.cfvsw-swatches-container[swatches-attr="${name}"] .cfvsw-selected-swatch`,
          `.cfvsw-swatches-container[swatches-attr="${attrName}"] .cfvsw-selected-swatch`
        ]

        for (const selector of swatchSelectors) {
          const $swatch = $form.find(selector)
          if ($swatch.length) {
            const swatchValue =
              $swatch.attr('data-slug') ||
              $swatch.data('slug') ||
              $swatch.attr('data-value')
            if (swatchValue) {
              value = swatchValue
              break
            }
          }
        }
      }

      if (value && value !== '') {
        parts.push(name + '=' + value)
      }
    })
    return parts.join('&')
  }

  // Main function to update button state based on current selection
  function updateForForm($form) {
    const pid = getFormPid($form);
    if (!pid) {
      tiwscLog('updateForForm: No product ID found');
      return;
    }
    
    const currentKey = getAttrKey($form);
    const set = addedMap.get(pid);
    const isAdded = !!(set && currentKey && set.has(currentKey));
    
    tiwscLog('updateForForm called:', {
      pid,
      currentKey,
      isAdded,
      addedSet: set ? Array.from(set) : [],
      buttonCount: $(`.tiwsc-variable-sample-main-button[data-product-id="${pid}"]`).length
    });
    
    // Update all main buttons for this product
    const $mainButtons = $(`.tiwsc-variable-sample-main-button[data-product-id="${pid}"]`);
    
    $mainButtons.each(function(index) {
      const $btn = $(this);
      const $label = $btn.find('.tiwsc-button-text');
      
      // Cache original label
      if (!$label.data('original-label')) {
        const currentText = $label.text().trim();
        if (currentText !== 'Toegevoegd') {
          $label.data('original-label', currentText);
        }
      }
      
      const beforeState = $btn.hasClass('tiwsc-added');
      
      if (isAdded) {
        $btn.addClass('tiwsc-added');
        $label.text('Toegevoegd');
        $btn.find('svg path:first-child').attr('fill', '#88ae98').attr('stroke', '#88ae98');
      } else {
        $btn.removeClass('tiwsc-added');
        const originalLabel = $label.data('original-label') || 'Gratis Kleurstaal';
        $label.text(originalLabel);
        $btn.find('svg path:first-child').attr('fill', 'none').attr('stroke', '#333');
      }
      
      const afterState = $btn.hasClass('tiwsc-added');
      if (beforeState !== afterState) {
        tiwscLog(`Button ${index} state changed: ${beforeState} -> ${afterState}`);
      }
    });
  }

  // Expose for debugging
  window.updateForForm = updateForForm
  window.getAttrKey = getAttrKey

  function rememberSelection (pidOrForm, key, added) {
    const pid =
      pidOrForm && pidOrForm.jquery ? getFormPid(pidOrForm) : pidOrForm
    if (!pid || !key) return
    if (!addedMap.has(pid)) addedMap.set(pid, new Set())
    const set = addedMap.get(pid)
    added ? set.add(key) : set.delete(key)
    console.log('[TIWSC] rememberSelection:', {
      pid,
      key,
      added,
      currentSet: Array.from(set)
    })
  }

  console.groupCollapsed('[TIWSC] Initial DOM scan')
  console.log('Free sample links found:', $('.tiwsc-free-sample-link').length)
  console.log(
    'Variable sample buttons found:',
    $('.tiwsc-variable-sample-button').length
  )
  console.log(
    'Product variation forms found:',
    $(FORM_SELECTOR).length,
    `(native: ${$('form.variations_form').length}, cfvsw: ${
      $('form.cfvsw_variations_form').length
    })`
  )
  console.groupEnd()

  // Update button states for all forms on page load
  console.log('[TIWSC] Updating button states for all forms on page load')
  $(FORM_SELECTOR).each(function () {
    console.log(
      '[TIWSC] Updating form:',
      $(this).attr('id') || 'no-id',
      'Product ID:',
      getFormPid($(this))
    )
    updateForForm($(this))
  })

  // Also update individual color sample buttons on page load
  $('.tiwsc-variable-sample-button').each(function () {
    const $btn = $(this)
    const productId = $btn.data('product-id')
    const attributeName = $btn.data('attribute-name')
    const attributeValue = $btn.data('attribute-value')
    const colorName = $btn.data('color-name')

    // Check if this specific variation is in the session
    const set = addedMap.get(productId)
    const key = 'attribute_' + attributeName + '=' + attributeValue
    const isAdded = !!(set && set.has(key))

    if (isAdded) {
      $btn.addClass('tiwsc-added')
      $btn.find('.tiwsc-button-text').text('Toegevoegd')
      $btn.find('svg path:first-child').attr('fill', '#88ae98')
    }
  })

  // Update samples page buttons on page load
  $('.tiwsc-add-sample-btn').each(function () {
    const $btn = $(this)
    const productId = $btn.data('product-id')
    const attributeName = $btn.data('attribute-name')
    const attributeValue = $btn.data('attribute-value')

    // Check if this specific variation is in the session
    const set = addedMap.get(productId)
    const key = 'attribute_' + attributeName + '=' + attributeValue
    const isAdded = !!(set && set.has(key))

    if (isAdded) {
      $btn.addClass('tiwsc-added').html('TOEGEVOEGD')
    }
  })

  // Critical: Listen for variation changes and update button immediately
  $(FORM_SELECTOR).on('found_variation', function (event, variation) {
    tiwscLog('found_variation event fired:', variation);
    const $form = $(this);
    // Call updateForForm immediately and with a delay
    updateForForm($form);
    setTimeout(() => {
      updateForForm($form);
    }, 50);
  })

  $(FORM_SELECTOR).on('reset_data', function () {
    console.log('[TIWSC] reset_data event fired')
    const $form = $(this)
    const $mainButtons = $(
      `.tiwsc-variable-sample-main-button[data-product-id="${getFormPid(
        $form
      )}"]`
    )
    $mainButtons.removeClass('tiwsc-added')
    $mainButtons.find('.tiwsc-button-text').text('Gratis Kleurstaal')
    $mainButtons
      .find('svg path:first-child')
      .attr('fill', 'none')
      .attr('stroke', '#333')
  })

  // Listen for clicks on variation swatches
  $(document).on('click', '.cfvsw-swatches-option', function() {
    const $swatch = $(this);
    const slug = $swatch.attr('data-slug');
    tiwscLog('Swatch clicked:', slug);
    
    const $form = $swatch.closest(FORM_SELECTOR);
    if ($form.length) {
      // Multiple attempts to ensure state update
      setTimeout(() => updateForForm($form), 10);
      setTimeout(() => updateForForm($form), 50);
      setTimeout(() => updateForForm($form), 100);
    }
  })

  // Also listen to select changes directly
  $(FORM_SELECTOR).on('change', 'select[name^="attribute_"]', function () {
    const $form = $(this).closest(FORM_SELECTOR)
    setTimeout(() => {
      updateForForm($form)
    }, 10)
  })

  // Check if sidebar elements exist
  console.log('Sidebar element exists:', $('#tiwsc-sidebar').length)
  console.log('Overlay element exists:', $('#tiwsc-sidebar-overlay').length)

  // Toggle sample functionality for simple products
  $(document).on('click', '.tiwsc-free-sample-link', function (e) {
    e.preventDefault()
    console.log('Sample link clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    console.log('Product ID:', productId)

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_toggle_sample',
        product_id: productId
      },
      function (response) {
        console.log('Toggle response:', response)
        if (response.not_allowed) {
          alert('Deze functie is niet beschikbaar.')
          return
        }

        if (response.limit) {
          alert(
            response.message || 'Je kunt maximaal 5 kleurstalen selecteren.'
          )
          return
        }

        // Update all instances of this product's button
        var $allButtons = $(
          '.tiwsc-free-sample-link[data-product-id="' + productId + '"]'
        )

        if (response.added) {
          $allButtons.addClass('tiwsc-added')
          $allButtons.find('.tiwsc-free-sample-text').text('Toegevoegd')
          // Update SVG to filled version
          $allButtons.find('svg path:first-child').attr('fill', '#88ae98')

          // Auto-open sidebar when sample is added
          openSidebar()

          // Update badge count
          loadSidebarContent()
        } else {
          $allButtons.removeClass('tiwsc-added')
          $allButtons.find('.tiwsc-free-sample-text').text('Gratis Kleurstaal')
          // Update SVG to outline version
          $allButtons
            .find('svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#222')
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Toggle sample functionality for variable products (color-specific)
  $(document).on('click', '.tiwsc-variable-sample-button', function (e) {
    e.preventDefault()
    console.log('Variable sample button clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    var attributeName = $this.data('attribute-name')
    var attributeValue = $this.data('attribute-value')
    var colorName = $this.data('color-name')
    console.log(
      'Product ID:',
      productId,
      'Attribute:',
      attributeName,
      'Value:',
      attributeValue
    )

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_toggle_sample',
        product_id: productId,
        attribute: attributeName,
        value: attributeValue
      },
      function (response) {
        console.log('Toggle response:', response)
        if (response.not_allowed) {
          alert('Deze functie is niet beschikbaar.')
          return
        }

        if (response.limit) {
          alert(
            response.message || 'Je kunt maximaal 5 kleurstalen selecteren.'
          )
          return
        }

        if (response.added) {
          $this.addClass('tiwsc-added')
          $this.find('.tiwsc-button-text').text('Toegevoegd')
          // Update SVG to filled version
          $this.find('svg path:first-child').attr('fill', '#88ae98')

          // Remember this selection was added
          const key = 'attribute_' + attributeName + '=' + attributeValue
          rememberSelection(productId, key, true)

          // Update form state
          updateForForm($this.closest(FORM_SELECTOR))

          // Auto-open sidebar when sample is added
          openSidebar()

          // Update badge count
          loadSidebarContent()
        } else {
          $this.removeClass('tiwsc-added')
          $this.find('.tiwsc-button-text').text(colorName)
          // Update SVG to outline version
          $this
            .find('svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#333')

          // Remember this selection was removed
          const key = 'attribute_' + attributeName + '=' + attributeValue
          rememberSelection(productId, key, false)

          // Update form state
          updateForForm($this.closest(FORM_SELECTOR))
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Main variable sample button click handler
  $(document).on('click', '.tiwsc-variable-sample-main-button', function (e) {
    e.preventDefault()
    console.log('[TIWSC] Main variable sample button clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    var attributeName = $this.data('attribute-name')

    // Find the closest variation form
    var $form = $this.closest(FORM_SELECTOR)
    if ($form.length === 0) {
      $form = $(FORM_SELECTOR).first()
    }

    // Get the current selected value
    var attributeValue = $form
      .find('[name="attribute_' + attributeName + '"]')
      .val()

    // If no value from select, try to get from swatches
    if (!attributeValue) {
      const possibleSelectors = [
        '[swatches-attr="attribute_' +
          attributeName +
          '"] .cfvsw-selected-swatch',
        '[swatches-attr="' + attributeName + '"] .cfvsw-selected-swatch',
        '.cfvsw-swatches-container[swatches-attr="attribute_' +
          attributeName +
          '"] .cfvsw-selected-swatch',
        '.cfvsw-swatches-container[swatches-attr="' +
          attributeName +
          '"] .cfvsw-selected-swatch'
      ]

      for (var i = 0; i < possibleSelectors.length; i++) {
        var $selectedSwatch = $form.find(possibleSelectors[i])
        if ($selectedSwatch.length > 0) {
          attributeValue =
            $selectedSwatch.attr('data-slug') ||
            $selectedSwatch.data('slug') ||
            $selectedSwatch.attr('data-value')
          if (attributeValue) break
        }
      }
    }

    console.log('[TIWSC] attribute:', attributeName, 'value:', attributeValue)

    if (!attributeValue) {
      alert('Selecteer eerst een kleur.')
      return
    }

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_toggle_sample',
        product_id: productId,
        attribute: attributeName,
        value: attributeValue
      },
      function (response) {
        tiwscLog('toggle response:', response);
        if (response.not_allowed) {
          alert('Deze functie is niet beschikbaar.')
          return
        }
        if (response.limit) {
          alert(response.message || 'Je kunt maximaal 5 kleurstalen selecteren.')
          return
        }

        const key = 'attribute_' + attributeName + '=' + attributeValue
        
        if (response.added) {
          // Add to map
          if (!addedMap.has(productId)) {
            addedMap.set(productId, new Set())
          }
          addedMap.get(productId).add(key)
          tiwscLog('Added to map:', productId, key, Array.from(addedMap.get(productId)))
          
          // Update button state immediately
          updateForForm($form)
          
          // Auto-open sidebar
          openSidebar()
        } else {
          // Remove from map
          if (addedMap.has(productId)) {
            addedMap.get(productId).delete(key)
            tiwscLog('Removed from map:', productId, key)
          }
          
          // Update button state immediately
          updateForForm($form)
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Open sidebar functionality
  $(document).on('click', '.tiwsc-open-sidebar-link', function (e) {
    e.preventDefault()
    console.log('Open sidebar link clicked')
    openSidebar()
  })

  // Close sidebar functionality
  $(document).on(
    'click',
    '.tiwsc-close-trigger, #tiwsc-sidebar-overlay',
    function (e) {
      e.preventDefault()
      console.log('Close sidebar clicked')
      closeSidebar()
    }
  )

  // Remove sample from sidebar
  $(document).on('click', '.tiwsc-remove-sample', function (e) {
    e.preventDefault()
    console.log('Remove sample clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    var sampleKey = $this.data('sample-key')

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_remove_sample',
        product_id: productId,
        sample_key: sampleKey
      },
      function (response) {
        console.log('Remove response:', response)
        if (response.removed) {
          // Parse the sample key for variable products
          if (sampleKey && sampleKey.indexOf('|') !== -1) {
            var parts = sampleKey.split('|')
            if (parts.length === 3) {
              var attrName = parts[1]
              var attrValue = parts[2]

              // Update the addedMap
              const key = 'attribute_' + attrName + '=' + attrValue
              rememberSelection(productId, key, false)

              // Update all forms with this product
              $(FORM_SELECTOR).each(function () {
                if (getFormPid($(this)) == productId) {
                  updateForForm($(this))
                }
              })

              // Update variable product buttons
              var $variableButtons = $(
                '.tiwsc-variable-sample-button[data-product-id="' +
                  productId +
                  '"][data-attribute-name="' +
                  attrName +
                  '"][data-attribute-value="' +
                  attrValue +
                  '"]'
              )
              $variableButtons.removeClass('tiwsc-added')
              $variableButtons.each(function () {
                var colorName = $(this).data('color-name')
                $(this).find('.tiwsc-button-text').text(colorName)
              })
              $variableButtons
                .find('svg path:first-child')
                .attr('fill', 'none')
                .attr('stroke', '#333')

              // Update samples page buttons
              var $samplePageButtons = $(
                '.tiwsc-add-sample-btn[data-product-id="' +
                  productId +
                  '"][data-attribute-name="' +
                  attrName +
                  '"][data-attribute-value="' +
                  attrValue +
                  '"]'
              )
              $samplePageButtons.removeClass('tiwsc-added').html('+ TOEVOEGEN')
            }
          } else {
            // Simple product
            var $allButtons = $(
              '.tiwsc-free-sample-link[data-product-id="' + productId + '"]'
            )
            $allButtons.removeClass('tiwsc-added')
            $allButtons
              .find('.tiwsc-free-sample-text')
              .text('Gratis Kleurstaal')
            $allButtons
              .find('svg path:first-child')
              .attr('fill', 'none')
              .attr('stroke', '#222')
          }

          // Reload sidebar content
          loadSidebarContent()
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Submit form functionality
  $(document).on('submit', '#tiwsc-sample-form', function (e) {
    e.preventDefault()
    console.log('Form submitted')
    var $form = $(this)
    var formData = $form.serialize()
    formData += '&action=tiwsc_submit_sample_form'

    $('#tiwsc-sample-form-result').html(
      '<div style="color:#666;">Bezig met verzenden...</div>'
    )

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(tiwsc_ajax.ajax_url, formData, function (response) {
      console.log('Form response:', response)
      $('#tiwsc-sample-form-result').html(
        '<div style="color:#008000;font-weight:bold;">' + response + '</div>'
      )

      // Clear form and reload sidebar after successful submission
      if (response.indexOf('Bedankt') !== -1) {
        $form[0].reset()
        setTimeout(function () {
          closeSidebar()
          // Clear all buttons
          $('.tiwsc-free-sample-link').removeClass('tiwsc-added')
          $('.tiwsc-free-sample-link .tiwsc-free-sample-text').text(
            'Gratis Kleurstaal'
          )
          $('.tiwsc-free-sample-link svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#222')

          $('.tiwsc-variable-sample-button').removeClass('tiwsc-added')
          $('.tiwsc-variable-sample-button').each(function () {
            var colorName = $(this).data('color-name')
            $(this).find('.tiwsc-button-text').text(colorName)
          })
          $('.tiwsc-variable-sample-button svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#333')

          $('.tiwsc-add-sample-btn')
            .removeClass('tiwsc-added')
            .html('+ TOEVOEGEN')

          // Clear the addedMap
          addedMap.clear()

          // Update all forms
          $(FORM_SELECTOR).each(function () {
            updateForForm($(this))
          })

          // Clear navigation badge
          updateNavBadge(0)
        }, 2000)
      }
    }).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
      $('#tiwsc-sample-form-result').html(
        '<div style="color:#d00;">Er is een fout opgetreden. Probeer het opnieuw.</div>'
      )
    })
  })

  // Function to open sidebar with animation
  function openSidebar () {
    console.log('openSidebar() called')

    var $sidebar = $('#tiwsc-sidebar')
    var $overlay = $('#tiwsc-sidebar-overlay')

    console.log('Sidebar element found:', $sidebar.length)
    console.log('Overlay element found:', $overlay.length)

    if ($sidebar.length === 0) {
      console.error('Sidebar element not found!')
      return
    }

    if ($overlay.length === 0) {
      console.error('Overlay element not found!')
      return
    }

    // Load content first
    loadSidebarContent()

    // Show overlay
    $overlay.show()
    console.log('Overlay shown')

    // Add body class to prevent scrolling
    $('body').addClass('tiwsc-sidebar-active')
    console.log('Body class added')

    // Force a reflow to ensure elements are ready
    $sidebar[0].offsetHeight

    // Trigger animations
    setTimeout(function () {
      $sidebar.addClass('tiwsc-sidebar-open')
      $overlay.addClass('tiwsc-overlay-open')
      console.log('Animation classes added')
    }, 10)
  }

  // Function to close sidebar with animation
  function closeSidebar () {
    console.log('closeSidebar() called')
    var $sidebar = $('#tiwsc-sidebar')
    var $overlay = $('#tiwsc-sidebar-overlay')

    // Remove animation classes
    $sidebar.removeClass('tiwsc-sidebar-open')
    $overlay.removeClass('tiwsc-overlay-open')
    console.log('Animation classes removed')

    // Remove body class
    $('body').removeClass('tiwsc-sidebar-active')

    // Hide overlay after animation completes
    setTimeout(function () {
      $overlay.hide()
      console.log('Overlay hidden')
    }, 300) // Match the CSS transition duration
  }

  // Function to update navigation badge
  function updateNavBadge (count) {
    // Update all navigation icons (both desktop and mobile)
    $('.tiwsc-nav-sample-icon .elementor-icon').each(function () {
      var $icon = $(this)
      var $badge = $icon.find('.tiwsc-nav-badge')

      if (count > 0) {
        if ($badge.length) {
          $badge.text(count)
        } else {
          $icon.append('<span class="tiwsc-nav-badge">' + count + '</span>')
        }
      } else {
        $badge.remove()
      }
    })
  }

  // Function to load sidebar content
  function loadSidebarContent () {
    console.log('Loading sidebar content...')

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_get_sidebar'
      },
      function (response) {
        console.log('Sidebar content loaded')
        $('#tiwsc-sidebar-content').html(response)

        // Update navigation badge with current sample count
        var sampleCount = $(
          '#tiwsc-sidebar-content .sample-prodcuct-img'
        ).length
        updateNavBadge(sampleCount)
      }
    ).fail(function (xhr, status, error) {
      console.error('Failed to load sidebar content:', status, error)
    })
  }

  // Close sidebar with Escape key
  $(document).keyup(function (e) {
    if (e.keyCode === 27) {
      // Escape key
      console.log('Escape key pressed')
      closeSidebar()
    }
  })

  // Prevent sidebar from closing when clicking inside it
  $(document).on('click', '#tiwsc-sidebar', function (e) {
    e.stopPropagation()
  })

  // Add a test button for debugging
  if ($('.tiwsc-open-sidebar-link').length === 0) {
    console.warn('No sidebar open links found on page')
  } else {
    console.log(
      'Found',
      $('.tiwsc-open-sidebar-link').length,
      'sidebar open links'
    )
  }

  // Additional event listeners for robust variation tracking
  $(document).on('click', '.tp-woo-swatches .tp-swatches', function () {
    const $form = $(this).closest(FORM_SELECTOR)
    if ($form.length) {
      setTimeout(() => {
        updateForForm($form)
      }, 50)
    }
  })

  // Handle reset variations
  $(document).on('click', '.reset_variations', function () {
    const $form = $(this).closest(FORM_SELECTOR)
    if ($form.length) {
      const $mainButtons = $(
        `.tiwsc-variable-sample-main-button[data-product-id="${getFormPid(
          $form
        )}"]`
      )
      $mainButtons.removeClass('tiwsc-added')
      $mainButtons.find('.tiwsc-button-text').text('Gratis Kleurstaal')
      $mainButtons
        .find('svg path:first-child')
        .attr('fill', 'none')
        .attr('stroke', '#333')
    }
  })

  // Handle dynamically loaded forms
  $(document.body).on('wc_variation_form', function (e, $newForm) {
    if ($newForm && $newForm.length) {
      console.log('[TIWSC] New variation form detected, initialising state')
      setTimeout(() => {
        updateForForm($newForm)
      }, 100)
    }
  })
})
