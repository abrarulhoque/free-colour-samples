jQuery(document).ready(function ($) {
  console.log('TIWSC Script loaded')
  console.log(
    'tiwsc_ajax:',
    typeof tiwsc_ajax !== 'undefined' ? tiwsc_ajax : 'undefined'
  )

  // Track which variations were added
  const ADDED_LABEL = 'Toegevoegd'; // change if your site uses a different text
  const addedMap = new Map(); // productId -> Set of "attribute=value&attribute2=value2"
  // Support both native WooCommerce variation forms and those generated by the
  // CartFlows Variation Swatches plugin (cfvsw)
  const FORM_SELECTOR = 'form.variations_form, form.cfvsw_variations_form';
  
  // Initialize addedMap with session data from server
  if (typeof tiwsc_ajax !== 'undefined' && tiwsc_ajax.initial_samples) {
    console.log('[TIWSC] Initializing with samples from session:', tiwsc_ajax.initial_samples)
    tiwsc_ajax.initial_samples.forEach(function(sampleKey) {
      if (sampleKey.indexOf('|') !== -1) {
        // Variable product: product_id|attribute|value
        const parts = sampleKey.split('|')
        if (parts.length === 3) {
          const productId = parts[0]
          const attrName = parts[1]
          const attrValue = parts[2]
          // Convert to the format used in JavaScript
          const key = 'attribute_' + attrName + '=' + attrValue
          
          if (!addedMap.has(productId)) {
            addedMap.set(productId, new Set())
          }
          addedMap.get(productId).add(key)
        }
      }
    })
    console.log('[TIWSC] Initialized addedMap:', addedMap)
  }

  function getFormPid($form) {
    return (
      $form.find('input[name="product_id"]').val() ||
      $form.find('input[name="add-to-cart"]').val() ||
      $form.data('product_id') ||
      null
    );
  }

  // Build a unique key that represents the *current* attribute selections for
  // this form. This function now checks for swatch plugins (cfvsw) that may
  // update their UI before updating the hidden select values. We prioritize
  // the swatch selection when available, falling back to select values.
  function getAttrKey($form) {
    const parts = [];
    $form.find('select[name^="attribute_"]').each(function () {
      const $select = $(this);
      const name = $select.attr('name');
      const selectValue = $select.val();
      const attrName = name.replace('attribute_', '');
      
      // Check for cfvsw selected swatch first (multiple possible selectors)
      let finalValue = selectValue;
      const swatchSelectors = [
        `[swatches-attr="${name}"] .cfvsw-selected-swatch`,
        `[swatches-attr="${attrName}"] .cfvsw-selected-swatch`,
        `.cfvsw-swatches-container[swatches-attr="${name}"] .cfvsw-selected-swatch`,
        `.cfvsw-swatches-container[swatches-attr="${attrName}"] .cfvsw-selected-swatch`
      ];
      
      for (const selector of swatchSelectors) {
        const $swatch = $form.find(selector);
        if ($swatch.length) {
          const swatchValue = $swatch.attr('data-slug') || $swatch.data('slug') || $swatch.attr('data-value');
          if (swatchValue) {
            finalValue = swatchValue;
            break;
          }
        }
      }
      
      // Also check tp-woo swatches (different plugin)
      if (finalValue === selectValue) {
        const $tpSwatch = $form.find(`.tp-woo-swatches[data-attribute_name="${name}"] .tp-swatches.selected`);
        if ($tpSwatch.length) {
          const tpValue = $tpSwatch.data('value');
          if (tpValue) finalValue = tpValue;
        }
      }
      
      if (finalValue) parts.push(name + '=' + finalValue);
    });
    return parts.join('&'); // unique enough per selection
  }

  // ---------------- Helper functions to locate buttons regardless of DOM placement ----------------
  // Find all main variable sample buttons for the product associated with this form.
  // This enhanced version handles buttons both inside and outside the form, including
  // those in sticky headers, quick views, or dynamically inserted elements.
  function findMainButtons($form) {
    const pid = getFormPid($form);
    if (!pid) return $();
    
    // Primary selector for buttons with matching product ID
    const selector = ".tiwsc-variable-sample-main-button[data-product-id='" + pid + "']";
    
    // Start with buttons inside the form
    let $buttons = $form.find(selector);
    
    // Add global buttons with matching product ID
    $buttons = $buttons.add($(selector));
    
    // Fallback: Look for buttons in common product wrapper patterns
    if ($buttons.length === 0) {
      // Try to find the product wrapper
      const $productWrapper = $form.closest('.product, [data-product-id="' + pid + '"], .type-product');
      if ($productWrapper.length) {
        $buttons = $productWrapper.find('.tiwsc-variable-sample-main-button');
      }
      
      // Also check for buttons in sticky/fixed headers that might reference this product
      const $stickyButtons = $('.elementor-sticky, .sticky-header, .fixed-header').find(selector);
      $buttons = $buttons.add($stickyButtons);
    }
    
    // Remove duplicates and return
    return $buttons.filter(function(index, elem) {
      return index === $buttons.index(elem);
    });
  }

  // Find per-color tile buttons for the product (used for optional visual sync)
  function findPerColorButtons($form) {
    const pid = getFormPid($form);
    if (!pid) return $();
    return $(".tiwsc-variable-sample-button[data-product-id='" + pid + "']");
  }

  function cacheDefaultLabel($btn) {
    if (!$btn.data('label-default')) {
      $btn.data('label-default', $.trim($btn.text()));
    }
  }

  function renderState($form, isAdded) {
    // Update all main buttons for this product, regardless of where they live in the DOM
    const $mainBtns = findMainButtons($form);

    $mainBtns.each(function () {
      const $btn = $(this);
      const $label = $btn.find('.tiwsc-button-text, .tiwsc-free-sample-text');

      // Cache default label text
      if ($label.length && !$label.data('label-default')) {
        $label.data('label-default', $.trim($label.text()));
      } else if (!$label.length && !$btn.data('label-default')) {
        $btn.data('label-default', $.trim($btn.text()));
      }

      if (isAdded) {
        $btn.addClass('tiwsc-added');
        if ($label.length) {
          $label.text(ADDED_LABEL);
        } else {
          $btn.text(ADDED_LABEL); // legacy fallback
        }
        // Optional icon styling to mirror click-handler visuals
        $btn.find('svg path:first-child').attr('fill', '#88ae98').attr('stroke', '#88ae98');
      } else {
        $btn.removeClass('tiwsc-added');
        if ($label.length) {
          $label.text($label.data('label-default') || 'Gratis Kleurstaal');
        } else {
          $btn.text($btn.data('label-default') || 'Gratis Kleurstaal');
        }
        $btn.find('svg path:first-child').attr('fill', 'none').attr('stroke', '#333');
      }
    });

    // Optional: keep the individual color tiles in sync for the *current* selection only
    const key = getAttrKey($form);
    const $tiles = findPerColorButtons($form);
    $tiles.each(function () {
      const $t = $(this);
      const attrName = $t.data('attribute-name');
      const attrValue = $t.data('attribute-value');
      const colorName = $t.data('color-name');

      const tileKey = 'attribute_' + attrName + '=' + attrValue;
      if (tileKey !== key) return; // only touch the tile that matches the current selection

      if (isAdded) {
        $t.addClass('tiwsc-added');
        $t.find('.tiwsc-button-text').text(ADDED_LABEL);
        $t.find('svg path:first-child').attr('fill', '#88ae98').attr('stroke', '#88ae98');
      } else {
        $t.removeClass('tiwsc-added');
        $t.find('.tiwsc-button-text').text(colorName || ($t.data('label-default') || 'Gratis Kleurstaal'));
        $t.find('svg path:first-child').attr('fill', 'none').attr('stroke', '#333');
      }
    });
  }

  // Event coalescing to prevent duplicate updates
  const updateTimers = new WeakMap();
  const lastUpdateKeys = new WeakMap();
  
  function updateForForm($form) {
    const pid = getFormPid($form);
    const key = getAttrKey($form);
    const set = pid && addedMap.get(pid);
    const isAdded = !!(set && key && set.has(key));
    
    // Check if we just updated with the same key
    const formEl = $form[0];
    const lastKey = lastUpdateKeys.get(formEl);
    if (lastKey === key) {
      // Same state, skip redundant update
      return;
    }
    
    // Clear any pending update for this form
    if (updateTimers.has(formEl)) {
      clearTimeout(updateTimers.get(formEl));
    }
    
    // Schedule coalesced update
    const timer = setTimeout(function() {
      lastUpdateKeys.set(formEl, key);
      renderState($form, isAdded);
      updateTimers.delete(formEl);
    }, 10); // 10ms coalesce window
    
    updateTimers.set(formEl, timer);
  }

  function rememberSelection(pidOrForm, key, added) {
    const pid = (pidOrForm && pidOrForm.jquery) ? getFormPid(pidOrForm) : pidOrForm;
    if (!pid || !key) return;
    if (!addedMap.has(pid)) addedMap.set(pid, new Set());
    const set = addedMap.get(pid);
    added ? set.add(key) : set.delete(key);
  }

  console.groupCollapsed('[TIWSC] Initial DOM scan')
  console.log('Free sample links found:', $('.tiwsc-free-sample-link').length)
  console.log(
    'Variable sample buttons found:',
    $('.tiwsc-variable-sample-button').length
  )
  console.log(
    'Product variation forms found:',
    $(FORM_SELECTOR).length,
    `(native: ${$('form.variations_form').length}, cfvsw: ${$('form.cfvsw_variations_form').length})`
  )
  console.groupEnd()
  
  // ===== TIWSC DEBUG INSTRUMENTATION BEGIN =====
  const tiwscDebug = true; // temporary debugging flag
  if (tiwscDebug) {
    // Store original functions
    const _getAttrKey = getAttrKey;
    const _renderState = renderState;
    const _updateForForm = updateForForm;
    
    // Enhanced getAttrKey wrapper with swatch detection
    getAttrKey = function($form) {
      const pid = getFormPid($form);
      const parts = [];
      const debugData = { pid, selects: [], swatches: [] };
      
      $form.find('select[name^="attribute_"]').each(function() {
        const $select = $(this);
        const name = $select.attr('name');
        const value = $select.val();
        const attrName = name.replace('attribute_', '');
        
        debugData.selects.push({ name, value });
        
        // Check for cfvsw selected swatch
        const swatchSelectors = [
          `[swatches-attr="${name}"] .cfvsw-selected-swatch`,
          `[swatches-attr="attribute_${attrName}"] .cfvsw-selected-swatch`,
          `[swatches-attr="${attrName}"] .cfvsw-selected-swatch`,
          `.cfvsw-swatches-container[swatches-attr="${name}"] .cfvsw-selected-swatch`,
          `.cfvsw-swatches-container[swatches-attr="${attrName}"] .cfvsw-selected-swatch`
        ];
        
        let swatchValue = null;
        for (const selector of swatchSelectors) {
          const $swatch = $form.find(selector);
          if ($swatch.length) {
            swatchValue = $swatch.attr('data-slug') || $swatch.data('slug') || $swatch.attr('data-value');
            debugData.swatches.push({ selector, value: swatchValue });
            break;
          }
        }
        
        // Use swatch value if found, otherwise select value
        const finalValue = swatchValue || value;
        if (finalValue) {
          parts.push(name + '=' + finalValue);
        }
      });
      
      const key = parts.join('&');
      console.log('[TIWSC DEBUG] getAttrKey ENHANCED', { ...debugData, finalKey: key });
      return key;
    };

    // Wrap renderState to log button counts and final state
    renderState = function($form, isAdded) {
      const pid = getFormPid($form);
      const $buttons = findMainButtons($form);
      console.log('[TIWSC DEBUG] renderState BEFORE', { pid, isAdded, mainButtonCount: $buttons.length });
      
      _renderState($form, isAdded);
      
      $buttons.each(function(idx) {
        const $btn = $(this);
        const $label = $btn.find('.tiwsc-button-text, .tiwsc-free-sample-text');
        const txt = $.trim($label.length ? $label.text() : $btn.text());
        const svg = $btn.find('svg path:first-child');
        console.log('[TIWSC DEBUG]  └─ button', idx, { 
          text: txt, 
          hasAddedClass: $btn.hasClass('tiwsc-added'),
          svgFill: svg.attr('fill'),
          svgStroke: svg.attr('stroke')
        });
      });
    };

    // Wrap updateForForm to log inputs / addedMap lookup
    updateForForm = function($form) {
      const pid = getFormPid($form);
      const key = getAttrKey($form);
      const set = pid && addedMap.get(pid);
      const isAdded = !!(set && key && set.has(key));
      console.log('[TIWSC DEBUG] updateForForm CALLED', { 
        pid, 
        key, 
        addedSet: set ? Array.from(set) : [], 
        isAdded,
        timestamp: Date.now()
      });
      _updateForForm($form);
    };

    // Debounce helper with promise-based microtask
    const tiwscUpdateTimers = new WeakMap();
    window.tiwscScheduleUpdate = function($form, origin) {
      if (!($form && $form.length)) return;
      const formEl = $form[0];
      
      if (tiwscUpdateTimers.has(formEl)) {
        clearTimeout(tiwscUpdateTimers.get(formEl));
      }
      
      // Use Promise microtask for immediate but deferred execution
      Promise.resolve().then(function() {
        console.log('[TIWSC DEBUG] microtask updateForForm (origin: ' + origin + ')');
        updateForForm($form);
      });
      
      // Also schedule with setTimeout as fallback
      const t = setTimeout(function() {
        console.log('[TIWSC DEBUG] timeout updateForForm (origin: ' + origin + ')');
        updateForForm($form);
        tiwscUpdateTimers.delete(formEl);
      }, 50);
      tiwscUpdateTimers.set(formEl, t);
    };

    // Observe DOM mutations that might replace selects or buttons
    function observeMutations($target, label) {
      if (!$target.length) return;
      const obs = new MutationObserver(function(muts) {
        const hasChanges = muts.some(m => m.addedNodes.length > 0 || m.removedNodes.length > 0);
        if (hasChanges) {
          console.log('[TIWSC DEBUG] Mutation@' + label, { 
            mutations: muts.length,
            timestamp: Date.now()
          });
        }
      });
      obs.observe($target[0], { childList: true, subtree: true, attributes: true, attributeFilter: ['class'] });
    }

    // Monitor all forms and their key areas
    $(FORM_SELECTOR).each(function() {
      const $f = $(this);
      const pid = getFormPid($f);
      
      // Monitor variation areas
      observeMutations($f.find('.variations, .cfvsw-swatches-container').first(), 'variations-' + pid);
      
      // Monitor swatch containers
      $f.find('[swatches-attr]').each(function(i) {
        observeMutations($(this), 'swatches-' + pid + '-' + i);
      });
      
      // Monitor main buttons
      findMainButtons($f).each(function(i, el) {
        if (el && el.parentNode) observeMutations($(el.parentNode), 'mainBtnParent-' + pid + '-' + i);
      });
    });
    
    // Log variation form events
    $(FORM_SELECTOR).on('found_variation.debug', function(e, variation) {
      console.log('[TIWSC DEBUG] EVENT: found_variation', { 
        variation: variation.attributes,
        timestamp: Date.now()
      });
    });
    
    $(FORM_SELECTOR).on('woocommerce_variation_has_changed.debug', function() {
      console.log('[TIWSC DEBUG] EVENT: woocommerce_variation_has_changed', { 
        timestamp: Date.now()
      });
    });
  }
  // ===== TIWSC DEBUG INSTRUMENTATION END =====
  
  // Update button states for all forms on page load
  console.log('[TIWSC] Updating button states for all forms on page load')
  $(FORM_SELECTOR).each(function() {
    console.log('[TIWSC] Updating form:', $(this).attr('id') || 'no-id', 'Product ID:', getFormPid($(this)))
    updateForForm($(this))
  })
  
  // Also update individual color sample buttons on page load
  $('.tiwsc-variable-sample-button').each(function() {
    const $btn = $(this)
    const productId = $btn.data('product-id')
    const attributeName = $btn.data('attribute-name')
    const attributeValue = $btn.data('attribute-value')
    const colorName = $btn.data('color-name')
    
    // Check if this specific variation is in the session
    const set = addedMap.get(productId)
    const key = 'attribute_' + attributeName + '=' + attributeValue
    const isAdded = !!(set && set.has(key))
    
    if (isAdded) {
      $btn.addClass('tiwsc-added')
      $btn.find('.tiwsc-button-text').text('Toegevoegd')
      $btn.find('svg path:first-child').attr('fill', '#88ae98')
    }
  })
  
  // Update samples page buttons on page load
  $('.tiwsc-add-sample-btn').each(function() {
    const $btn = $(this)
    const productId = $btn.data('product-id')
    const attributeName = $btn.data('attribute-name')
    const attributeValue = $btn.data('attribute-value')
    
    // Check if this specific variation is in the session
    const set = addedMap.get(productId)
    const key = 'attribute_' + attributeName + '=' + attributeValue
    const isAdded = !!(set && set.has(key))
    
    if (isAdded) {
      $btn.addClass('tiwsc-added').html('TOEGEVOEGD')
    }
  })

  $(FORM_SELECTOR).on('found_variation', function (event, variation) {
    console.log('[TIWSC] found_variation event fired:', variation)
    const $form = $(this);
    // Use microtask to ensure swatch plugins have updated their DOM
    Promise.resolve().then(function() {
      updateForForm($form);
    });
  })

  $(FORM_SELECTOR).on('reset_data', function () {
    console.log('[TIWSC] reset_data event fired')
    renderState($(this), false); // Clear button state when reset
  })
  
  // Listen for clicks on variation swatches to ensure compatibility
  $(document).on('click', '.cfvsw-swatches-option', function() {
    console.log('[TIWSC] Swatch clicked:', $(this).attr('data-slug'))
    const $form = $(this).closest(FORM_SELECTOR)
    // Use microtask to ensure the swatch plugin has updated the DOM
    Promise.resolve().then(function() {
      // Update button state after swatch selection
      updateForForm($form)
    });
  })

  // Check if sidebar elements exist
  console.log('Sidebar element exists:', $('#tiwsc-sidebar').length)
  console.log('Overlay element exists:', $('#tiwsc-sidebar-overlay').length)

  // Toggle sample functionality for simple products
  $(document).on('click', '.tiwsc-free-sample-link', function (e) {
    e.preventDefault()
    console.log('Sample link clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    console.log('Product ID:', productId)

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_toggle_sample',
        product_id: productId
      },
      function (response) {
        console.log('Toggle response:', response)
        if (response.not_allowed) {
          alert('Deze functie is niet beschikbaar.')
          return
        }

        if (response.limit) {
          alert(
            response.message || 'Je kunt maximaal 5 kleurstalen selecteren.'
          )
          return
        }

        // Update all instances of this product's button
        var $allButtons = $(
          '.tiwsc-free-sample-link[data-product-id="' + productId + '"]'
        )

        if (response.added) {
          $allButtons.addClass('tiwsc-added')
          $allButtons.find('.tiwsc-free-sample-text').text('Toegevoegd')
          // Update SVG to filled version
          $allButtons.find('svg path:first-child').attr('fill', '#88ae98')

          // Auto-open sidebar when sample is added
          openSidebar()
          
          // Update badge count
          loadSidebarContent();
        } else {
          $allButtons.removeClass('tiwsc-added')
          $allButtons.find('.tiwsc-free-sample-text').text('Gratis Kleurstaal')
          // Update SVG to outline version
          $allButtons
            .find('svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#222')
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Toggle sample functionality for variable products (color-specific)
  $(document).on('click', '.tiwsc-variable-sample-button', function (e) {
    e.preventDefault()
    console.log('Variable sample button clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    var attributeName = $this.data('attribute-name')
    var attributeValue = $this.data('attribute-value')
    var colorName = $this.data('color-name')
    console.log(
      'Product ID:',
      productId,
      'Attribute:',
      attributeName,
      'Value:',
      attributeValue
    )

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_toggle_sample',
        product_id: productId,
        attribute: attributeName,
        value: attributeValue
      },
      function (response) {
        console.log('Toggle response:', response)
        if (response.not_allowed) {
          alert('Deze functie is niet beschikbaar.')
          return
        }

        if (response.limit) {
          alert(
            response.message || 'Je kunt maximaal 5 kleurstalen selecteren.'
          )
          return
        }

        if (response.added) {
          $this.addClass('tiwsc-added')
          $this.find('.tiwsc-button-text').text('Toegevoegd')
          // Update SVG to filled version
          $this.find('svg path:first-child').attr('fill', '#88ae98')

          // Remember this selection was added
          const key = 'attribute_' + attributeName + '=' + attributeValue
          rememberSelection(productId, key, true)
          
          // Update form state
          updateForForm($this.closest(FORM_SELECTOR))

          // Auto-open sidebar when sample is added
          openSidebar()
          
          // Update badge count
          loadSidebarContent();
        } else {
          $this.removeClass('tiwsc-added')
          $this.find('.tiwsc-button-text').text(colorName)
          // Update SVG to outline version
          $this
            .find('svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#333')
            
          // Remember this selection was removed
          const key = 'attribute_' + attributeName + '=' + attributeValue
          rememberSelection(productId, key, false)
          
          // Update form state
          updateForForm($this.closest(FORM_SELECTOR))
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Add after existing variable-sample-button logic
  $(document).on('click', '.tiwsc-variable-sample-main-button', function (e) {
    e.preventDefault()
    console.log('[TIWSC] Main variable sample button clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    var attributeName = $this.data('attribute-name') // e.g., pa_color

    // Find the closest variation form or fallback to global
    var $form = $this.closest(FORM_SELECTOR)
    if ($form.length === 0) {
      $form = $(FORM_SELECTOR)
    }
    var attributeSelector = '[name="attribute_' + attributeName + '"]'
    
    // First try to get value from the select element
    var attributeValue = $form.find(attributeSelector).val()
    
    // If no value from select, try different swatch plugin selectors
    if (!attributeValue) {
      // Debug: log all available swatches containers
      console.log('[TIWSC] Looking for swatches with attribute:', attributeName)
      console.log('[TIWSC] Form:', $form)
      console.log('[TIWSC] Swatches containers:', $form.find('[swatches-attr]'))
      
      // Try variation swatches plugin (cfvsw) - check multiple possible attribute formats
      var possibleSelectors = [
        '[swatches-attr="attribute_' + attributeName + '"] .cfvsw-selected-swatch',
        '[swatches-attr="' + attributeName + '"] .cfvsw-selected-swatch', // Sometimes without attribute_ prefix
        '.cfvsw-swatches-container[swatches-attr="attribute_' + attributeName + '"] .cfvsw-selected-swatch',
        '.cfvsw-swatches-container[swatches-attr="' + attributeName + '"] .cfvsw-selected-swatch'
      ]
      
      for (var i = 0; i < possibleSelectors.length; i++) {
        var $selectedSwatch = $form.find(possibleSelectors[i])
        if ($selectedSwatch.length > 0) {
          attributeValue = $selectedSwatch.attr('data-slug') || $selectedSwatch.data('slug') || $selectedSwatch.attr('data-value')
          console.log('[TIWSC] Found cfvsw swatch with selector:', possibleSelectors[i], 'value:', attributeValue)
          break
        }
      }
      
      // If still not found, try searching globally (outside form)
      if (!attributeValue) {
        for (var i = 0; i < possibleSelectors.length; i++) {
          var $selectedSwatch = $(possibleSelectors[i])
          if ($selectedSwatch.length > 0) {
            attributeValue = $selectedSwatch.attr('data-slug') || $selectedSwatch.data('slug') || $selectedSwatch.attr('data-value')
            console.log('[TIWSC] Found cfvsw swatch globally with selector:', possibleSelectors[i], 'value:', attributeValue)
            break
          }
        }
      }
      
      // If still no value, try other common swatch plugin selectors
      if (!attributeValue) {
        var $otherSwatch = $form.find('[data-attribute_name="attribute_' + attributeName + '"] .selected, [data-attribute_name="attribute_' + attributeName + '"] .active')
        if ($otherSwatch.length > 0) {
          attributeValue = $otherSwatch.attr('data-value') || $otherSwatch.data('value')
          console.log('[TIWSC] Found other swatch:', attributeValue)
        }
      }
      
      // Try radio buttons
      if (!attributeValue) {
        attributeValue = $form.find(attributeSelector + ':checked').val()
      }
    }

    console.log('[TIWSC] attribute:', attributeName, 'value:', attributeValue)
    console.log('[TIWSC] Selected swatch element:', $form.find('[swatches-attr="attribute_' + attributeName + '"] .cfvsw-selected-swatch'))

    if (!attributeValue) {
      alert('Selecteer eerst een kleur.')
      return
    }

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_toggle_sample',
        product_id: productId,
        attribute: attributeName,
        value: attributeValue
      },
      function (response) {
        console.log('[TIWSC] toggle response:', response)
        if (response.not_allowed) {
          alert('Deze functie is niet beschikbaar.')
          return
        }
        if (response.limit) {
          alert(
            response.message || 'Je kunt maximaal 5 kleurstalen selecteren.'
          )
          return
        }

        if (response.added) {
          // Track which variation was added using the proper key format
          const $form = $this.closest(FORM_SELECTOR)
          rememberSelection($form, getAttrKey($form), true)
          
          $this.addClass('tiwsc-added')
          $this.find('.tiwsc-button-text').text('Toegevoegd')
          $this
            .find('svg path:first-child')
            .attr('fill', '#88ae98')
            .attr('stroke', '#88ae98')
            
          // Update form state
          updateForForm($form)
            
          // Auto-open sidebar
          openSidebar()
        } else {
          // Track removal
          const $form = $this.closest(FORM_SELECTOR)
          rememberSelection($form, getAttrKey($form), false)
          
          $this.removeClass('tiwsc-added')
          $this.find('.tiwsc-button-text').text('Gratis Kleurstaal')
          $this
            .find('svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#333')
            
          // Update form state
          updateForForm($form)
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Open sidebar functionality
  $(document).on('click', '.tiwsc-open-sidebar-link', function (e) {
    e.preventDefault()
    console.log('Open sidebar link clicked')
    openSidebar()
  })

  // Close sidebar functionality
  $(document).on(
    'click',
    '.tiwsc-close-trigger, #tiwsc-sidebar-overlay',
    function (e) {
      e.preventDefault()
      console.log('Close sidebar clicked')
      closeSidebar()
    }
  )

  // Remove sample from sidebar
  $(document).on('click', '.tiwsc-remove-sample', function (e) {
    e.preventDefault()
    console.log('Remove sample clicked')
    var $this = $(this)
    var productId = $this.data('product-id')
    var sampleKey = $this.data('sample-key')

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_remove_sample',
        product_id: productId,
        sample_key: sampleKey
      },
      function (response) {
        console.log('Remove response:', response)
        if (response.removed) {
          // Check if this is a variable product sample
          if (sampleKey && sampleKey.indexOf('|') !== -1) {
            // Parse the sample key for variable products
            var parts = sampleKey.split('|')
            if (parts.length === 3) {
              var attrName = parts[1]
              var attrValue = parts[2]
              // Update variable product buttons
              var $variableButtons = $(
                '.tiwsc-variable-sample-button[data-product-id="' +
                  productId +
                  '"][data-attribute-name="' +
                  attrName +
                  '"][data-attribute-value="' +
                  attrValue +
                  '"]'
              )
              $variableButtons.removeClass('tiwsc-added')
              $variableButtons.each(function () {
                var colorName = $(this).data('color-name')
                $(this).find('.tiwsc-button-text').text(colorName)
              })
              // Update SVG to outline version
              $variableButtons
                .find('svg path:first-child')
                .attr('fill', 'none')
                .attr('stroke', '#333')
            }
            // Also update samples page buttons
            var $samplePageButtons = $(
              '.tiwsc-add-sample-btn[data-product-id="' +
                productId +
                '"][data-attribute-name="' +
                attrName +
                '"][data-attribute-value="' +
                attrValue +
                '"]'
            )
            $samplePageButtons.removeClass('tiwsc-added').html('+ TOEVOEGEN')
          } else {
            // Update simple product buttons
            var $allButtons = $(
              '.tiwsc-free-sample-link[data-product-id="' + productId + '"]'
            )
            $allButtons.removeClass('tiwsc-added')
            $allButtons
              .find('.tiwsc-free-sample-text')
              .text('Gratis Kleurstaal')
            // Update SVG to outline version
            $allButtons
              .find('svg path:first-child')
              .attr('fill', 'none')
              .attr('stroke', '#222')
          }

          // Reload sidebar content (this will also update badge)
          loadSidebarContent()

          // Also update the unified main button
          var $mainBtn = $(
            '.tiwsc-variable-sample-main-button[data-product-id="' +
              productId +
              '"][data-attribute-name="' +
              attrName +
              '"]'
          )
          if ($mainBtn.length) {
            $mainBtn.removeClass('tiwsc-added')
            $mainBtn.find('.tiwsc-button-text').text('Gratis Kleurstaal')
            $mainBtn
              .find('svg path:first-child')
              .attr('fill', 'none')
              .attr('stroke', '#333')
          }
          
          // Update the addedMap to remove this variation
          if (productId && attrName && attrValue) {
            const key = 'attribute_' + attrName + '=' + attrValue
            rememberSelection(productId, key, false)
            
            // Update form state for all forms with this product
            $(FORM_SELECTOR).each(function() {
              if (getFormPid($(this)) == productId) {
                updateForForm($(this))
              }
            })
          }
        }
      },
      'json'
    ).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
    })
  })

  // Submit form functionality
  $(document).on('submit', '#tiwsc-sample-form', function (e) {
    e.preventDefault()
    console.log('Form submitted')
    var $form = $(this)
    var formData = $form.serialize()
    formData += '&action=tiwsc_submit_sample_form'

    $('#tiwsc-sample-form-result').html(
      '<div style="color:#666;">Bezig met verzenden...</div>'
    )

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(tiwsc_ajax.ajax_url, formData, function (response) {
      console.log('Form response:', response)
      $('#tiwsc-sample-form-result').html(
        '<div style="color:#008000;font-weight:bold;">' + response + '</div>'
      )

      // Clear form and reload sidebar after successful submission
      if (response.indexOf('Bedankt') !== -1) {
        $form[0].reset()
        setTimeout(function () {
          closeSidebar()
          // Update all sample buttons to not-added state
          $('.tiwsc-free-sample-link').removeClass('tiwsc-added')
          $('.tiwsc-free-sample-link .tiwsc-free-sample-text').text(
            'Gratis Kleurstaal'
          )
          $('.tiwsc-free-sample-link svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#222')

          // Also clear variable product buttons
          $('.tiwsc-variable-sample-button').removeClass('tiwsc-added')
          $('.tiwsc-variable-sample-button').each(function () {
            var colorName = $(this).data('color-name')
            $(this).find('.tiwsc-button-text').text(colorName)
          })
          $('.tiwsc-variable-sample-button svg path:first-child')
            .attr('fill', 'none')
            .attr('stroke', '#333')

          // Clear samples page buttons
          $('.tiwsc-add-sample-btn')
            .removeClass('tiwsc-added')
            .html('+ TOEVOEGEN')
            
          // Clear the addedMap since all samples were submitted
          
          // Clear navigation badge
          updateNavBadge(0);
          addedMap.clear()
          
          // Update all forms
          $(FORM_SELECTOR).each(function() {
            updateForForm($(this))
          })
        }, 2000)
      }
    }).fail(function (xhr, status, error) {
      console.error('AJAX error:', status, error)
      $('#tiwsc-sample-form-result').html(
        '<div style="color:#d00;">Er is een fout opgetreden. Probeer het opnieuw.</div>'
      )
    })
  })

  // Function to open sidebar with animation
  function openSidebar () {
    console.log('openSidebar() called')

    var $sidebar = $('#tiwsc-sidebar')
    var $overlay = $('#tiwsc-sidebar-overlay')

    console.log('Sidebar element found:', $sidebar.length)
    console.log('Overlay element found:', $overlay.length)

    if ($sidebar.length === 0) {
      console.error('Sidebar element not found!')
      return
    }

    if ($overlay.length === 0) {
      console.error('Overlay element not found!')
      return
    }

    // Load content first
    loadSidebarContent()

    // Show overlay
    $overlay.show()
    console.log('Overlay shown')

    // Add body class to prevent scrolling
    $('body').addClass('tiwsc-sidebar-active')
    console.log('Body class added')

    // Force a reflow to ensure elements are ready
    $sidebar[0].offsetHeight

    // Trigger animations
    setTimeout(function () {
      $sidebar.addClass('tiwsc-sidebar-open')
      $overlay.addClass('tiwsc-overlay-open')
      console.log('Animation classes added')
    }, 10)
  }

  // Function to close sidebar with animation
  function closeSidebar () {
    console.log('closeSidebar() called')
    var $sidebar = $('#tiwsc-sidebar')
    var $overlay = $('#tiwsc-sidebar-overlay')

    // Remove animation classes
    $sidebar.removeClass('tiwsc-sidebar-open')
    $overlay.removeClass('tiwsc-overlay-open')
    console.log('Animation classes removed')

    // Remove body class
    $('body').removeClass('tiwsc-sidebar-active')

    // Hide overlay after animation completes
    setTimeout(function () {
      $overlay.hide()
      console.log('Overlay hidden')
    }, 300) // Match the CSS transition duration
  }

  // Function to update navigation badge
  function updateNavBadge(count) {
    // Update all navigation icons (both desktop and mobile)
    $('.tiwsc-nav-sample-icon .elementor-icon').each(function() {
      var $icon = $(this);
      var $badge = $icon.find('.tiwsc-nav-badge');
      
      if (count > 0) {
        if ($badge.length) {
          $badge.text(count);
        } else {
          $icon.append('<span class="tiwsc-nav-badge">' + count + '</span>');
        }
      } else {
        $badge.remove();
      }
    });
  }

  // Function to load sidebar content
  function loadSidebarContent () {
    console.log('Loading sidebar content...')

    if (typeof tiwsc_ajax === 'undefined') {
      console.error('tiwsc_ajax is undefined')
      return
    }

    $.post(
      tiwsc_ajax.ajax_url,
      {
        action: 'tiwsc_get_sidebar'
      },
      function (response) {
        console.log('Sidebar content loaded')
        $('#tiwsc-sidebar-content').html(response)
        
        // Update navigation badge with current sample count
        var sampleCount = $('#tiwsc-sidebar-content .tiwsc-sample-item').length;
        updateNavBadge(sampleCount);
      }
    ).fail(function (xhr, status, error) {
      console.error('Failed to load sidebar content:', status, error)
    })
  }

  // Close sidebar with Escape key
  $(document).keyup(function (e) {
    if (e.keyCode === 27) {
      // Escape key
      console.log('Escape key pressed')
      closeSidebar()
    }
  })

  // Prevent sidebar from closing when clicking inside it
  $(document).on('click', '#tiwsc-sidebar', function (e) {
    e.stopPropagation()
  })

  // Add a test button for debugging
  if ($('.tiwsc-open-sidebar-link').length === 0) {
    console.warn('No sidebar open links found on page')
  } else {
    console.log(
      'Found',
      $('.tiwsc-open-sidebar-link').length,
      'sidebar open links'
    )
  }

  // Event listeners for variation tracking
  
  // Whenever the variation changes, re-evaluate state
  $(FORM_SELECTOR)
    .on('change', 'select[name^="attribute_"]', function () {
      const $form = $(this).closest(FORM_SELECTOR);
      Promise.resolve().then(function() {
        updateForForm($form);
      });
    })
    .on('woocommerce_variation_has_changed', function () {
      const $form = $(this);
      Promise.resolve().then(function() {
        updateForForm($form);
      });
    });

  // Cover popular swatch plugins (you have both tp-woo-swatches and cfvsw markup)
  $(document).on('click', '.tp-woo-swatches .tp-swatches', function () {
    const $form = $(this).closest(FORM_SELECTOR);
    Promise.resolve().then(function() {
      updateForForm($form);
    });
  });

  // Reset link should clear the visual state
  $(document).on('click', '.reset_variations', function () {
    renderState($(this).closest(FORM_SELECTOR), false);
  });

  // Ensure cfvsw forms initialised *after* their dynamic insertion also get
  // picked up (e.g. quick-view modals). We re-run when a new form is inserted
  // into the DOM.
  $(document.body).on('wc_variation_form', function (e, $newForm) {
    if ($newForm && $newForm.length) {
      console.log('[TIWSC] New variation form detected, initialising state');
      updateForForm($newForm);
    }
  });
})
